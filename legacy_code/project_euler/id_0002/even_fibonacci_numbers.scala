/*
 * Even Fibonacci numbers
 *
 * Problem 2
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two
 * terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 */

import scala.collection.mutable.ListBuffer

def Fibb(x: Int): Int = {
  if (x == 1 || x == 0) 1 else Fibb(x - 1) + Fibb(x - 2)
}

// Example:

val example_in = Range(1, 11).toList
val example_truth = List(1, 2, 3, 5, 8, 13, 21, 34, 55, 89)

assert(example_in.map(Fibb) == example_truth)

// Challenge:

/* 1 - Find all the Fibnacci's that are lower than the upper limit.
 * 2 - Filter all the uneven ones.
 * 3 - Summ all the even ones.
 */

val UPPER: Int = 4e6.asInstanceOf[Int]

// 1 - Find all the Fibnacci's that are lower than the upper limit.
val fibbos_list: ListBuffer[Int] = ListBuffer()
var i = 1
var f_i = Fibb(i)
while (f_i < UPPER) {
  fibbos_list.append(f_i)
  i += 1
  f_i = Fibb(i)
  // println("Input: " + i.toString + " Fibb: " + f_i.toString)
}

// 2 - Filter all the uneven ones.
val filt = fibbos_list.filter((x: Int) => {(x % 2) == 0}: Boolean)
//                                                        |-> Must not be of
//                                                        | type "Int".

// 3 - Summ all the even ones.
val result = filt.sum

println(result)
